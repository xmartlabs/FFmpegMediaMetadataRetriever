apply plugin: 'com.android.library'
//apply plugin: "com.vanniktech.maven.publish"

buildscript {
    repositories {
        jcenter()
        google()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }

    dependencies {
//        classpath "gradle.plugin.com.vanniktech:gradle-maven-publish-plugin:0.8.0"
    }
}

android {
    buildFeatures {
        buildConfig = false
    }

    compileSdkVersion 29

    def mkfile = "NDK_APPLICATION_MK=Application.mk"
    def aarname = "all-fmmr"

    //def mkfile = "NDK_APPLICATION_MK=ARMv7Application.mk"
    //def aarname = "armv7-fmmr"

    //def mkfile = "NDK_APPLICATION_MK=x86Application.mk"
    //def aarname = "x86-fmmr"

    //def mkfile = "NDK_APPLICATION_MK=x86_64Application.mk"
    //def aarname = "x86_64-fmmr"

    //def mkfile = "NDK_APPLICATION_MK=ARM_64Application.mk"
    //def aarname = "arm_64-fmmr"

    defaultConfig {
        minSdkVersion 14
        targetSdkVersion 29
        versionCode 17
        versionName "1.0.15"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            //minifyEnabled false
            //proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    sourceSets.main {
        jni.srcDirs = [] // This prevents the auto generation of Android.mk
        jniLibs.srcDir 'src/main/libs' // This is not necessary unless you have precompiled libraries in your project.
    }

    task buildFFmpeg(type: Exec, description: 'Compile FFmpeg source via NDK') {
        def dir = file('src/main/ffmpeg/build-ffmpeg.sh').absolutePath
        commandLine "$dir",
                '--with-openssl'
    }

    task buildNative(type: Exec, description: 'Compile JNI source via NDK') {
        def ndkDir = android.ndkDirectory
        print mkfile
        commandLine "$ndkDir/ndk-build",
                mkfile,
                '-C', file('src/main/jni').absolutePath, // Change src/main/jni the relative path to your jni source
                '-j', Runtime.runtime.availableProcessors(),
                'all',
                'NDK_DEBUG=1'
    }

    task cleanNative(type: Exec, description: 'Clean JNI object files') {
        delete "$project.projectDir/src/main/libs"
        delete "$project.projectDir/src/main/obj"
        delete project.buildDir
        def ndkDir = android.ndkDirectory
        commandLine "$ndkDir/ndk-build",
                '-C', file('src/main/jni').absolutePath, // Change src/main/jni the relative path to your jni source
                'clean'
    }

    clean.dependsOn 'cleanNative'
    buildNative.dependsOn 'buildFFmpeg'

    tasks.withType(JavaCompile) {
        compileTask -> compileTask.dependsOn buildNative
    }

    /*libraryVariants.all { variant ->
        variant.outputs.each { output ->
            def outputFile = output.outputFile
            if (outputFile != null && outputFile.name.endsWith('.aar')) {
                def fileName = "${aarname}.aar"
                output.outputFile = new File(outputFile.parent, fileName)
            }
        }
    }*/

    android.libraryVariants.all { variant ->
        variant.outputs.all {
            outputFileName = "${aarname}.aar"
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    testImplementation 'junit:junit:4.12'

    androidTestImplementation 'androidx.annotation:annotation:1.1.0'
    androidTestImplementation 'androidx.test:runner:1.2.0'
    androidTestImplementation 'androidx.test:rules:1.2.0'
}